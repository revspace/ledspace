#!/usr/bin/perl -w
use strict;
use Graphics::ColorUtils qw(hsv2rgb);
use Net::MQTT::Simple;
use Time::HiRes qw(sleep);

my $buizen = 13;
my $leds_per_buis = 36;
my $leds_uit = "\0\0\0" x ($leds_per_buis - 1);
my $leds = $buizen * $leds_per_buis;
my $bytes = $leds * 3;
$| = 1;

my $geel = "\xff\xc0\x00";
my $uit  = "\0\0\0";

my $mqtt = Net::MQTT::Simple->new("mosquitto.space.revspace.nl");
$mqtt->subscribe('revspace/button/doorbell' => sub {
    for (1 .. 3) {
        for (1 .. 3) {
            print $geel x $leds; sleep .5;
            print $uit  x $leds; sleep .5;
        }
        for (1 .. 3) {
            my $laatste = $buizen - 1;
            for my $huidige (0 .. $laatste) {
                my $frame = "";
                $frame .= $uit  x ($huidige * $leds_per_buis);
                $frame .= $geel x $leds_per_buis;
                $frame .= $uit  x (($laatste - $huidige) * $leds_per_buis);
                print $frame;
                sleep .1;
            }
        }
    }
});
$mqtt->subscribe('revspace/button/nomz', sub {
	my $start = time();
	while (time() - $start < 30) {
		for (1..8) {
			print "\xff\x80\x00" x (7 * $leds_per_buis),
			      "\x00\x00\xff" x (6 * $leds_per_buis);
			sleep .02;
			print "\0" x $bytes;
			sleep .05;
		}
		sleep .6;
		for (1..8) {
			print "\x00\x00\xff" x (7 * $leds_per_buis),
			      "\xff\x80\x00" x (6 * $leds_per_buis);
			sleep .02;
			print "\0" x $bytes;
			sleep .05
		}
		sleep .6
	}
});


while (my $bytes_read = sysread STDIN, my $buf, $bytes) {
    warn "Short read ($bytes_read)" if $bytes_read != $bytes;

    print $buf;
    $mqtt->tick(0);
}
